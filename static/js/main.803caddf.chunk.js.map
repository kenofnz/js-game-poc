{"version":3,"sources":["util/mapUtils.js","App.js","serviceWorker.js","index.js"],"names":["loadMapLayerData","mapJson","map","layers","layer","Array","from","length","height","_","i","data","slice","width","row","tileId","j","id","x","tilewidth","y","tileheight","reduce","acc","concat","filter","tile","app","PIXI","antialias","transparent","resolution","ticker","shared","loadQueue","queueLoad","resource","uri","onLoad","onLoadParams","push","viewport","baseMap","actors","aboveActorMap","stage","addChild","fetch","process","then","r","json","mapData","layerData","forEach","tilesets","tileset","idx","tilsetSource","source","substring","layerNum","resources","sprite","textures","String","padStart","add","loading","shift","load","sheet","spritesheet","sortableChildren","sprites","animations","actor","animationSpeed","Math","random","play","vx","vy","delta","zIndex","pivot","floor","position","App","useEffect","document","getElementById","appendChild","view","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.803caddf.chunk.js","sourcesContent":["import { map } from \"lodash\";\r\n\r\nexport const loadMapLayerData = (mapJson) => {\r\n    let result = map(mapJson.layers, (layer) => {\r\n        const array2d = Array.from({ length: mapJson.height }).map((_, i) =>\r\n            layer.data.slice(i * mapJson.width, (i + 1) * mapJson.width)\r\n        );\r\n        return array2d\r\n            .map((row, i) => {\r\n                return row.map((tileId, j) => ({\r\n                    id: `${i}_${j}`,\r\n                    tileId,\r\n                    x: mapJson.tilewidth * j,\r\n                    y: mapJson.tileheight * i,\r\n                    width: mapJson.tilewidth,\r\n                    height: mapJson.tileheight\r\n                }));\r\n            })\r\n            .reduce((acc, row) => row.concat(acc), [])\r\n            .filter(tile => tile.tileId !== 0);\r\n    });\r\n    return result;\r\n};\r\n\r\nexport default { loadMapLayerData };","import React, { useEffect } from 'react';\nimport * as PIXI from 'pixi.js';\nimport { forEach } from 'lodash';\nimport './App.css';\nimport { loadMapLayerData } from './util/mapUtils';\n\nconst app = new PIXI.Application({\n  width: 1280,         // default: 800\n  height: 720,        // default: 600\n  antialias: false,    // default: false\n  transparent: false, // default: false\n  resolution: 1       // default: 1\n});\nconst ticker = PIXI.Ticker.shared;\n\nconst loadQueue = [];\nconst queueLoad = ({ id, uri, onLoad, onLoadParams }) => {\n  var resource = { id, uri, onLoad, onLoadParams };\n  loadQueue.push(resource);\n}\n\nlet viewport = new PIXI.Container();\nlet baseMap = new PIXI.Container();\nlet actors = new PIXI.Container();\nlet aboveActorMap = new PIXI.Container();\n\napp.stage.addChild(viewport);\nviewport.addChild(baseMap, actors, aboveActorMap);\n\nfetch(process.env.PUBLIC_URL + '/assets/map/demo.json')\n  .then((r) => r.json())\n  .then((mapData) => {\n    let layerData = loadMapLayerData(mapData);\n    forEach(mapData.tilesets, (tileset, idx) => {\n      let tilsetSource = tileset.source.substring(2);\n      queueLoad({\n        id: tilsetSource,\n        uri: `${process.env.PUBLIC_URL}/assets/${tilsetSource}`,\n        onLoad: (onLoadParams) => {\n          forEach(layerData, (layer, layerNum) => {\n            layer.forEach(tile => {\n              const resources = PIXI.Loader.shared.resources[tilsetSource];\n              const sprite = new PIXI.Sprite(resources.textures[`tile${String(tile.tileId - 1).padStart(3, '0')}.png`]);\n\n              sprite.x = tile.x;\n              sprite.y = tile.y;\n\n              if (layerNum <= 1) {\n                baseMap.addChild(sprite)\n              } else {\n                aboveActorMap.addChild(sprite);\n              }\n            });\n          });\n        },\n        onLoadParams: { tileset }\n      });\n\n    });\n  });\n\nticker.add(() => {\n  if (!PIXI.Loader.shared.loading && loadQueue.length > 0) {\n    let resource = loadQueue.shift();\n\n    PIXI.Loader.shared\n      .add(resource.id, resource.uri)\n      .load(() => resource.onLoad(resource.onLoadParams));\n  }\n})\nqueueLoad({ id: 'walk', uri: process.env.PUBLIC_URL + '/assets/sprites/walk/walk.json', onLoad: setup });\n\nfunction setup() {\n  let sheet = PIXI.Loader.shared.resources['walk'].spritesheet;\n  actors.sortableChildren = true;\n  let sprites = [\n    new PIXI.AnimatedSprite(sheet.animations['down']),\n    new PIXI.AnimatedSprite(sheet.animations['left']),\n    new PIXI.AnimatedSprite(sheet.animations['up']),\n    new PIXI.AnimatedSprite(sheet.animations['right']),\n    new PIXI.AnimatedSprite(sheet.animations['down']),\n    new PIXI.AnimatedSprite(sheet.animations['left']),\n    new PIXI.AnimatedSprite(sheet.animations['up']),\n    new PIXI.AnimatedSprite(sheet.animations['right'])\n  ]\n  forEach(sprites, (actor) => {\n    actor.animationSpeed = 0.167;\n    actor.y = Math.random() * 666;\n    actor.x = Math.random() * 1000;\n    actor.play();\n    actor.vx = Math.random() * 6 + 1;\n    actor.vy = Math.random() * 6 + 1;\n  });\n\n  actors.addChild(...sprites);\n  ticker.add((delta) => {\n    forEach(sprites, (actor) => {\n      if (actor.x >= 48*48-48 || actor.x <= 0) {\n        actor.vx = (actor.x >= 1280 - 48 ? -1 : 1) * (Math.random() * 6 + 2);\n      }\n      if (actor.y >= 48*48-48 || actor.y <= 0) {\n        actor.vy = (actor.y >= 720 - 48 ? -1 : 1) * (Math.random() * 6 + 2);\n      }\n      actor.y += actor.vy;\n      actor.x += actor.vx;\n      actor.zIndex = actor.y;\n    });\n\n    viewport.pivot.x = Math.floor(sprites[0].position.x);\n    viewport.pivot.y = Math.floor(sprites[0].position.y);\n    viewport.position.x = Math.floor(1280 / 2);\n    viewport.position.y = Math.floor(720 / 2);\n  })\n}\n\nfunction App() {\n  useEffect(() => {\n    const element = document.getElementById('canvas');\n    element.appendChild(app.view);\n  }, []);\n\n  return (\n    <div id=\"canvas\" className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}